[2023-11-13T14:35:13.144+0530] {taskinstance.py:1157} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: plugin_dag.data_transfer manual__2023-11-13T09:05:08.543382+00:00 [queued]>
[2023-11-13T14:35:13.148+0530] {taskinstance.py:1157} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: plugin_dag.data_transfer manual__2023-11-13T09:05:08.543382+00:00 [queued]>
[2023-11-13T14:35:13.148+0530] {taskinstance.py:1359} INFO - Starting attempt 1 of 1
[2023-11-13T14:35:13.158+0530] {taskinstance.py:1380} INFO - Executing <Task(DataTransferOperator): data_transfer> on 2023-11-13 09:05:08.543382+00:00
[2023-11-13T14:35:13.161+0530] {standard_task_runner.py:57} INFO - Started process 226553 to run task
[2023-11-13T14:35:13.163+0530] {standard_task_runner.py:84} INFO - Running: ['airflow', 'tasks', 'run', 'plugin_dag', 'data_transfer', 'manual__2023-11-13T09:05:08.543382+00:00', '--job-id', '4554', '--raw', '--subdir', 'DAGS_FOLDER/dag_plugins.py', '--cfg-path', '/tmp/tmpl7opicb6']
[2023-11-13T14:35:13.164+0530] {standard_task_runner.py:85} INFO - Job 4554: Subtask data_transfer
[2023-11-13T14:35:13.186+0530] {task_command.py:415} INFO - Running <TaskInstance: plugin_dag.data_transfer manual__2023-11-13T09:05:08.543382+00:00 [running]> on host harika-Latitude-5511
[2023-11-13T14:35:13.227+0530] {taskinstance.py:1660} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='airflow' AIRFLOW_CTX_DAG_ID='plugin_dag' AIRFLOW_CTX_TASK_ID='data_transfer' AIRFLOW_CTX_EXECUTION_DATE='2023-11-13T09:05:08.543382+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2023-11-13T09:05:08.543382+00:00'
[2023-11-13T14:35:13.228+0530] {demo_plugin.py:30} INFO - ### custom operator execution starts
[2023-11-13T14:35:13.228+0530] {demo_plugin.py:31} INFO - source_file_path: /home/harika/airflow/plugins/source.txt
[2023-11-13T14:35:13.228+0530] {demo_plugin.py:32} INFO - dest_file_path: /home/harika/airflow/plugins/destination.txt
[2023-11-13T14:35:13.228+0530] {demo_plugin.py:33} INFO - delete_list: ['Airflow', 'is']
[2023-11-13T14:35:13.228+0530] {demo_plugin.py:38} INFO - reading line: Apache Airflow provides a simple way to write, schedule, and monitor workflows using pure Python. In this blog post, we’ll cover Apache Airflow core concepts and components and then build and operate a simple data pipeline.

[2023-11-13T14:35:13.228+0530] {demo_plugin.py:40} INFO - matching string: Airflow
[2023-11-13T14:35:13.228+0530] {demo_plugin.py:40} INFO - matching string: is
[2023-11-13T14:35:13.229+0530] {demo_plugin.py:42} INFO - output line is: Apache  provides a simple way to write, schedule, and monitor workflows using pure Python. In th blog post, we’ll cover Apache  core concepts and components and then build and operate a simple data pipeline.

[2023-11-13T14:35:13.229+0530] {demo_plugin.py:38} INFO - reading line: 

[2023-11-13T14:35:13.229+0530] {demo_plugin.py:40} INFO - matching string: Airflow
[2023-11-13T14:35:13.229+0530] {demo_plugin.py:40} INFO - matching string: is
[2023-11-13T14:35:13.229+0530] {demo_plugin.py:42} INFO - output line is: 

[2023-11-13T14:35:13.229+0530] {demo_plugin.py:38} INFO - reading line: ## Why Apache Airflow is ideal for data pipelines

[2023-11-13T14:35:13.229+0530] {demo_plugin.py:40} INFO - matching string: Airflow
[2023-11-13T14:35:13.229+0530] {demo_plugin.py:40} INFO - matching string: is
[2023-11-13T14:35:13.229+0530] {demo_plugin.py:42} INFO - output line is: ## Why Apache   ideal for data pipelines

[2023-11-13T14:35:13.229+0530] {demo_plugin.py:38} INFO - reading line: 

[2023-11-13T14:35:13.229+0530] {demo_plugin.py:40} INFO - matching string: Airflow
[2023-11-13T14:35:13.229+0530] {demo_plugin.py:40} INFO - matching string: is
[2023-11-13T14:35:13.229+0530] {demo_plugin.py:42} INFO - output line is: 

[2023-11-13T14:35:13.229+0530] {demo_plugin.py:38} INFO - reading line: Apache Airflow was started by Airbnb in 2014 as a solution to manage complex data workflows. It has been open source since the first commit and was announced as a top-level project by Apache in 2019. Apache Airflow has a number of benefits that make it easier to manage the complexity of managing batch scheduled jobs, including:

[2023-11-13T14:35:13.229+0530] {demo_plugin.py:40} INFO - matching string: Airflow
[2023-11-13T14:35:13.229+0530] {demo_plugin.py:40} INFO - matching string: is
[2023-11-13T14:35:13.229+0530] {demo_plugin.py:42} INFO - output line is: Apache  was started by Airbnb in 2014 as a solution to manage complex data workflows. It has been open source since the first commit and was announced as a top-level project by Apache in 2019. Apache  has a number of benefits that make it easier to manage the complexity of managing batch scheduled jobs, including:

[2023-11-13T14:35:13.229+0530] {demo_plugin.py:38} INFO - reading line: 

[2023-11-13T14:35:13.229+0530] {demo_plugin.py:40} INFO - matching string: Airflow
[2023-11-13T14:35:13.230+0530] {demo_plugin.py:40} INFO - matching string: is
[2023-11-13T14:35:13.230+0530] {demo_plugin.py:42} INFO - output line is: 

[2023-11-13T14:35:13.230+0530] {demo_plugin.py:38} INFO - reading line: - **Scalable**: the architecture uses a message queue system to run an arbitrary number of workers.

[2023-11-13T14:35:13.230+0530] {demo_plugin.py:40} INFO - matching string: Airflow
[2023-11-13T14:35:13.230+0530] {demo_plugin.py:40} INFO - matching string: is
[2023-11-13T14:35:13.230+0530] {demo_plugin.py:42} INFO - output line is: - **Scalable**: the architecture uses a message queue system to run an arbitrary number of workers.

[2023-11-13T14:35:13.230+0530] {demo_plugin.py:38} INFO - reading line: - **Dynamic**: pipelines are written in Python, allowing dynamic generation.

[2023-11-13T14:35:13.230+0530] {demo_plugin.py:40} INFO - matching string: Airflow
[2023-11-13T14:35:13.230+0530] {demo_plugin.py:40} INFO - matching string: is
[2023-11-13T14:35:13.230+0530] {demo_plugin.py:42} INFO - output line is: - **Dynamic**: pipelines are written in Python, allowing dynamic generation.

[2023-11-13T14:35:13.230+0530] {demo_plugin.py:38} INFO - reading line: - **Extensible**: it’s easy to integrate customer operators and libraries.
[2023-11-13T14:35:13.230+0530] {demo_plugin.py:40} INFO - matching string: Airflow
[2023-11-13T14:35:13.230+0530] {demo_plugin.py:40} INFO - matching string: is
[2023-11-13T14:35:13.230+0530] {demo_plugin.py:42} INFO - output line is: - **Extensible**: it’s easy to integrate customer operators and libraries.
[2023-11-13T14:35:13.233+0530] {taskinstance.py:1398} INFO - Marking task as SUCCESS. dag_id=plugin_dag, task_id=data_transfer, execution_date=20231113T090508, start_date=20231113T090513, end_date=20231113T090513
[2023-11-13T14:35:13.255+0530] {local_task_job_runner.py:228} INFO - Task exited with return code 0
[2023-11-13T14:35:13.271+0530] {taskinstance.py:2776} INFO - 0 downstream tasks scheduled from follow-on schedule check
